// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var This = {};

function confirmPaymentFn(_elements) {
  return Promise.resolve({});
}

function confirmCardPaymentFn(_clientSecretId, _data, _options) {
  return Promise.resolve({});
}

function retrievePaymentIntentFn(_paymentIntentId) {
  return Promise.resolve({});
}

function update(_options) {
  
}

function getElement(_componentName) {
  
}

function fetchUpdates(param) {
  return new Promise((function (resolve, param) {
                setTimeout((function (param) {
                        resolve({});
                      }), 1000);
              }));
}

function defaultPaymentElement_on(_str, _func) {
  
}

function defaultPaymentElement_collapse(param) {
  
}

function defaultPaymentElement_blur(param) {
  
}

function defaultPaymentElement_update(_x) {
  
}

function defaultPaymentElement_destroy(param) {
  
}

function defaultPaymentElement_unmount(param) {
  
}

function defaultPaymentElement_mount(_string) {
  
}

function defaultPaymentElement_focus(param) {
  
}

function defaultPaymentElement_clear(param) {
  
}

var defaultPaymentElement = {
  on: defaultPaymentElement_on,
  collapse: defaultPaymentElement_collapse,
  blur: defaultPaymentElement_blur,
  update: defaultPaymentElement_update,
  destroy: defaultPaymentElement_destroy,
  unmount: defaultPaymentElement_unmount,
  mount: defaultPaymentElement_mount,
  focus: defaultPaymentElement_focus,
  clear: defaultPaymentElement_clear
};

function create(_componentType, _options) {
  return defaultPaymentElement;
}

var emptyElement = {
  getElement: getElement,
  update: update,
  fetchUpdates: fetchUpdates,
  create: create
};

function emptyHyperInstance_elements(_ev) {
  return emptyElement;
}

function emptyHyperInstance_widgets(_ev) {
  return emptyElement;
}

function emptyHyperInstance_paymentRequest(_ev) {
  return null;
}

var emptyHyperInstance = {
  confirmPayment: confirmPaymentFn,
  elements: emptyHyperInstance_elements,
  confirmCardPayment: confirmCardPaymentFn,
  retrievePaymentIntent: retrievePaymentIntentFn,
  widgets: emptyHyperInstance_widgets,
  paymentRequest: emptyHyperInstance_paymentRequest
};

function eventTypeMapper($$event) {
  switch ($$event) {
    case "blur" :
        return /* Blur */5;
    case "change" :
        return /* Change */1;
    case "click" :
        return /* Click */2;
    case "escape" :
        return /* Escape */0;
    case "focus" :
        return /* Focus */4;
    case "ready" :
        return /* Ready */3;
    default:
      return /* None */6;
  }
}

function generateSessionID(param) {
  var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  return Belt_Array.make(32, 0).reduce((function (acc, param) {
                var charIndex = Js_math.random_int(0, chars.length);
                var newChar = chars.charAt(charIndex);
                return acc + newChar;
              }), "");
}

function getEnv(option) {
  var dict = option !== undefined ? Belt_Option.getWithDefault(Js_json.decodeObject(Caml_option.valFromOption(option)), {}) : ({});
  var val = Js_dict.get(dict, "env");
  if (val === undefined) {
    return "";
  }
  var str = Js_json.decodeString(Caml_option.valFromOption(val));
  if (str !== undefined) {
    return str;
  } else {
    return "";
  }
}

var OrcaJs = {};

export {
  This ,
  confirmPaymentFn ,
  confirmCardPaymentFn ,
  retrievePaymentIntentFn ,
  update ,
  getElement ,
  fetchUpdates ,
  defaultPaymentElement ,
  create ,
  emptyElement ,
  emptyHyperInstance ,
  eventTypeMapper ,
  generateSessionID ,
  getEnv ,
  OrcaJs ,
}
/* confirmCardPaymentFn Not a pure module */
