// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Context from "./Context.bs.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";

function Index$Elements2(Props) {
  var children = Props.children;
  var stripe = Props.stripe;
  var options = Props.options;
  var elementOptions = Context.elementsOptionObjMapper(options);
  var match = React.useState(function () {
        return Context.defaultSwitchContext;
      });
  var setSwitchState = match[1];
  var match$1 = React.useState(function () {
        return Context.defaultElementsContext;
      });
  var setElementsState = match$1[1];
  React.useEffect((function () {
          Js_promise.then_((function (switchInstance) {
                  var orcaElementsConfig = Curry._1(switchInstance.elements, options);
                  var newElemValues_update = orcaElementsConfig.update;
                  var newElemValues_getElement = orcaElementsConfig.getElement;
                  var newElemValues_fetchUpdates = orcaElementsConfig.fetchUpdates;
                  var newElemValues_create = orcaElementsConfig.create;
                  var newElemValues = {
                    options: elementOptions,
                    update: newElemValues_update,
                    getElement: newElemValues_getElement,
                    fetchUpdates: newElemValues_fetchUpdates,
                    create: newElemValues_create
                  };
                  var newSwitchVal_clientSecret = elementOptions.clientSecret;
                  var newSwitchVal_confirmPayment = switchInstance.confirmPayment;
                  var newSwitchVal_confirmCardPayment = switchInstance.confirmCardPayment;
                  var newSwitchVal_retrievePaymentIntent = switchInstance.retrievePaymentIntent;
                  var newSwitchVal_paymentRequest = switchInstance.paymentRequest;
                  var switchValClone_clientSecret = elementOptions.clientSecret;
                  var switchValClone_confirmPayment = newSwitchVal_confirmPayment;
                  var switchValClone_confirmCardPayment = newSwitchVal_confirmCardPayment;
                  var switchValClone_retrievePaymentIntent = newSwitchVal_retrievePaymentIntent;
                  var switchValClone_paymentRequest = newSwitchVal_paymentRequest;
                  var switchValClone = {
                    clientSecret: switchValClone_clientSecret,
                    confirmPayment: switchValClone_confirmPayment,
                    confirmCardPayment: switchValClone_confirmCardPayment,
                    retrievePaymentIntent: switchValClone_retrievePaymentIntent,
                    paymentRequest: switchValClone_paymentRequest
                  };
                  Curry._1(setSwitchState, (function (param) {
                          return switchValClone;
                        }));
                  Curry._1(setElementsState, (function (param) {
                          return newElemValues;
                        }));
                  return Promise.resolve(switchValClone);
                }), stripe);
        }), []);
  return React.createElement(Context.SwitchContextProvider.make, Context.SwitchContextProvider.makeProps(match[0], React.createElement(Context.ElementsContextProvider.make, Context.ElementsContextProvider.makeProps(match$1[0], children, undefined)), undefined));
}

function Index$HyperElements2(Props) {
  var children = Props.children;
  var hyper = Props.hyper;
  var options = Props.options;
  var elementOptions = Context.elementsOptionObjMapper(options);
  var match = React.useState(function () {
        return Context.defaultSwitchContext;
      });
  var setSwitchState = match[1];
  var match$1 = React.useState(function () {
        return Context.defaultElementsContext;
      });
  var setElementsState = match$1[1];
  React.useEffect((function () {
          Js_promise.then_((function (switchInstance) {
                  var orcaElementsConfig = Curry._1(switchInstance.elements, options);
                  var newElemValues_update = orcaElementsConfig.update;
                  var newElemValues_getElement = orcaElementsConfig.getElement;
                  var newElemValues_fetchUpdates = orcaElementsConfig.fetchUpdates;
                  var newElemValues_create = orcaElementsConfig.create;
                  var newElemValues = {
                    options: elementOptions,
                    update: newElemValues_update,
                    getElement: newElemValues_getElement,
                    fetchUpdates: newElemValues_fetchUpdates,
                    create: newElemValues_create
                  };
                  var newSwitchVal_clientSecret = elementOptions.clientSecret;
                  var newSwitchVal_confirmPayment = switchInstance.confirmPayment;
                  var newSwitchVal_confirmCardPayment = switchInstance.confirmCardPayment;
                  var newSwitchVal_retrievePaymentIntent = switchInstance.retrievePaymentIntent;
                  var newSwitchVal_paymentRequest = switchInstance.paymentRequest;
                  var switchValClone_clientSecret = elementOptions.clientSecret;
                  var switchValClone_confirmPayment = newSwitchVal_confirmPayment;
                  var switchValClone_confirmCardPayment = newSwitchVal_confirmCardPayment;
                  var switchValClone_retrievePaymentIntent = newSwitchVal_retrievePaymentIntent;
                  var switchValClone_paymentRequest = newSwitchVal_paymentRequest;
                  var switchValClone = {
                    clientSecret: switchValClone_clientSecret,
                    confirmPayment: switchValClone_confirmPayment,
                    confirmCardPayment: switchValClone_confirmCardPayment,
                    retrievePaymentIntent: switchValClone_retrievePaymentIntent,
                    paymentRequest: switchValClone_paymentRequest
                  };
                  Curry._1(setSwitchState, (function (param) {
                          return switchValClone;
                        }));
                  Curry._1(setElementsState, (function (param) {
                          return newElemValues;
                        }));
                  return Promise.resolve(switchValClone);
                }), hyper);
        }), []);
  return React.createElement(Context.SwitchContextProvider.make, Context.SwitchContextProvider.makeProps(match[0], React.createElement(Context.ElementsContextProvider.make, Context.ElementsContextProvider.makeProps(match$1[0], children, undefined)), undefined));
}

function useHyper(param) {
  return React.useContext(Context.switchContext);
}

function useStripe(param) {
  console.warn("useStripe() is deprecated. Use useHyper() instead");
  return React.useContext(Context.switchContext);
}

function useWidgets(param) {
  return React.useContext(Context.elementsContext);
}

function useElements(param) {
  console.warn("useElements() is deprecated. Use useWidgets() instead");
  return React.useContext(Context.elementsContext);
}

function Index$PaymentElementsWrapper(Props) {
  var idOpt = Props.id;
  var options = Props.options;
  var onChange = Props.onChange;
  var onReady = Props.onReady;
  var componentType = Props.componentType;
  var onFocus = Props.onFocus;
  var onBlur = Props.onBlur;
  var onClick = Props.onClick;
  var id = idOpt !== undefined ? idOpt : "payment-Element";
  var hyperSwitch = React.useContext(Context.switchContext);
  var elementsState = React.useContext(Context.elementsContext);
  var divRef = React.useRef(null);
  var paymentElement = Curry._2(elementsState.create, componentType, options);
  React.useEffect((function () {
          var paymentElement = Curry._2(elementsState.create, componentType, options);
          Curry._1(paymentElement.mount, "#orca-elements-payment-element-" + id + "");
        }), [
        divRef,
        elementsState
      ]);
  React.useEffect((function () {
          Curry._2(paymentElement.on, "ready", onReady);
          Curry._2(paymentElement.on, "focus", onFocus);
          Curry._2(paymentElement.on, "blur", onBlur);
          Curry._2(paymentElement.on, "clickTriggered", onClick);
          Curry._2(paymentElement.on, "change", onChange);
        }), [
        elementsState,
        hyperSwitch
      ]);
  return React.createElement("div", {
              ref: divRef,
              id: "orca-elements-payment-element-" + id + ""
            });
}

function Index$PaymentElement2(Props) {
  var id = Props.id;
  var options = Props.options;
  var onChange = Props.onChange;
  var onReady = Props.onReady;
  var onFocus = Props.onFocus;
  var onBlur = Props.onBlur;
  var onClick = Props.onClick;
  return React.createElement(Index$PaymentElementsWrapper, {
              id: id,
              options: options,
              onChange: onChange,
              onReady: onReady,
              componentType: "payment",
              onFocus: onFocus,
              onBlur: onBlur,
              onClick: onClick
            });
}

function Index$CardElement2(Props) {
  var id = Props.id;
  var options = Props.options;
  var onChange = Props.onChange;
  var onReady = Props.onReady;
  var onFocus = Props.onFocus;
  var onBlur = Props.onBlur;
  var onClick = Props.onClick;
  return React.createElement(Index$PaymentElementsWrapper, {
              id: id,
              options: options,
              onChange: onChange,
              onReady: onReady,
              componentType: "card",
              onFocus: onFocus,
              onBlur: onBlur,
              onClick: onClick
            });
}

function Index$CardNumber2(Props) {
  var id = Props.id;
  var options = Props.options;
  var onChange = Props.onChange;
  var onReady = Props.onReady;
  var onFocus = Props.onFocus;
  var onBlur = Props.onBlur;
  var onClick = Props.onClick;
  return React.createElement(Index$PaymentElementsWrapper, {
              id: id,
              options: options,
              onChange: onChange,
              onReady: onReady,
              componentType: "cardNumber",
              onFocus: onFocus,
              onBlur: onBlur,
              onClick: onClick
            });
}

function Index$CardCVC2(Props) {
  var id = Props.id;
  var options = Props.options;
  var onChange = Props.onChange;
  var onReady = Props.onReady;
  var onFocus = Props.onFocus;
  var onBlur = Props.onBlur;
  var onClick = Props.onClick;
  return React.createElement(Index$PaymentElementsWrapper, {
              id: id,
              options: options,
              onChange: onChange,
              onReady: onReady,
              componentType: "cardCvc",
              onFocus: onFocus,
              onBlur: onBlur,
              onClick: onClick
            });
}

function Index$CardExpiry2(Props) {
  var id = Props.id;
  var options = Props.options;
  var onChange = Props.onChange;
  var onReady = Props.onReady;
  var onFocus = Props.onFocus;
  var onBlur = Props.onBlur;
  var onClick = Props.onClick;
  return React.createElement(Index$PaymentElementsWrapper, {
              id: id,
              options: options,
              onChange: onChange,
              onReady: onReady,
              componentType: "cardExpiry",
              onFocus: onFocus,
              onBlur: onBlur,
              onClick: onClick
            });
}

var Elements = Index$Elements2;

var HyperElements = Index$HyperElements2;

var PaymentElement = Index$PaymentElement2;

var UnifiedCheckout = Index$PaymentElement2;

var CardElement = Index$CardElement2;

var CardWidget = Index$CardElement2;

var CardNumberElement = Index$CardNumber2;

var CardNumberWidget = Index$CardNumber2;

var CardExpiryElement = Index$CardExpiry2;

var CardExpiryWidget = Index$CardExpiry2;

var CardCVCElement = Index$CardCVC2;

var CardCVCWidget = Index$CardCVC2;

export {
  Elements ,
  HyperElements ,
  PaymentElement ,
  UnifiedCheckout ,
  CardElement ,
  CardWidget ,
  CardNumberElement ,
  CardNumberWidget ,
  CardExpiryElement ,
  CardExpiryWidget ,
  CardCVCElement ,
  CardCVCWidget ,
  useStripe ,
  useHyper ,
  useElements ,
  useWidgets ,
}
/* react Not a pure module */
