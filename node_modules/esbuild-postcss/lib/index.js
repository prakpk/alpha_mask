var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var import_path = __toModule(require("path"));
var import_promises = __toModule(require("fs/promises"));
var import_postcss = __toModule(require("postcss"));
var import_postcss_load_config = __toModule(require("postcss-load-config"));
module.exports = ({ extensions = [".css"] } = {}) => ({
  name: "postcss",
  async setup(build) {
    let postcssConfig;
    try {
      postcssConfig = await (0, import_postcss_load_config.default)();
    } catch (err) {
      if (/No PostCSS Config found/i.test(err.message)) {
        postcssConfig = false;
      } else {
        throw err;
      }
    }
    build.onLoad({ filter: new RegExp(`(${extensions.join("|")})$`) }, async (args) => {
      if (postcssConfig) {
        const css = await import_promises.default.readFile(args.path, "utf8");
        const result = await (0, import_postcss.default)(postcssConfig.plugins).process(css, {
          ...postcssConfig.options,
          from: args.path
        });
        return { contents: result.css, loader: "css" };
      }
      if (import_path.default.extname(args.path) !== ".css") {
        const css = await import_promises.default.readFile(args.path, "utf8");
        return { contents: css, loader: "css" };
      }
      return { loader: "css" };
    });
  }
});
